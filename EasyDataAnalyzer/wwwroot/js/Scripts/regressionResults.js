import { Chart } from "chart.js";
var EasyDataAnalyzer;
(function (EasyDataAnalyzer) {
    var Analysis;
    (function (Analysis) {
        var Results;
        (function (Results) {
            class DatasetModel {
                constructor(data, showLine, showPoint) {
                    let bgColor = [];
                    let brdColor = [];
                    data.forEach((i) => {
                        bgColor.push('rgba(255, 99, 132, 0.2)');
                        brdColor.push('rgba(255, 99, 132, 1)');
                    });
                    this.showLine = showLine;
                    this.fill = false;
                    this.tension = 0;
                    this.data = data;
                    this.backgroundColor = bgColor;
                    this.borderColor = brdColor;
                    this.borderWidth = 2;
                    this.pointRadius = showPoint ? 5 : 0;
                }
            }
            Results.DatasetModel = DatasetModel;
            class RegressionService {
                constructor() {
                    this.ElementIDs = {
                        YToXChart: "YToXChart",
                        XToYChart: "XToYChart",
                    };
                    this.Urls = {
                        LoadCharts: "LoadCharts",
                    };
                    this.initialize();
                }
                initialize() {
                    let self = this;
                    let YToXCanvas = document.getElementById(self.ElementIDs.YToXChart);
                    let XToYCanvas = document.getElementById(self.ElementIDs.XToYChart);
                    let YToXContext = YToXCanvas.getContext("2d");
                    let XToYContext = XToYCanvas.getContext("2d");
                    $.ajax({
                        url: self.Urls.LoadCharts,
                        async: false,
                        method: "GET",
                        success: (response) => {
                            let data = response.analysisData;
                            let chartData = response.ytoX;
                            let YToXChart = self.initializeChart(YToXContext, data, response.ytoX, response.xLabel, response.yLabel);
                            let reversedData = [];
                            let reversedChart = [];
                            data.forEach((e, i) => {
                                reversedData.push({ x: e.y, y: e.x, r: e.r, t: e.t });
                            });
                            chartData.forEach((e, i) => {
                                reversedChart.push({ x: e.y, y: e.x, r: e.r, t: e.t });
                            });
                            let XToYChart = self.initializeChart(XToYContext, reversedData, reversedChart, response.yLabel, response.xLabel);
                        }
                    });
                }
                initializeChart(context, points, resultChart, axesXLable, axesYLabel) {
                    let datasets = [];
                    datasets.push(new DatasetModel(resultChart, true, false));
                    datasets.push(new DatasetModel(points, false, true));
                    let minX = points[0].x, minY = points[0].y, maxX = points[0].x, maxY = points[0].y;
                    for (let i = 1; i < points.length; i++) {
                        if (points[i].x < minX) {
                            minX = points[i].x;
                        }
                        if (points[i].x > maxX) {
                            maxX = points[i].x;
                        }
                        if (points[i].y < minY) {
                            minY = points[i].y;
                        }
                        if (points[i].y > maxY) {
                            maxY = points[i].y;
                        }
                    }
                    let chart = new Chart(context, {
                        type: 'scatter',
                        data: {
                            datasets: datasets,
                        },
                        options: {
                            legend: {
                                display: false
                            },
                            scales: {
                                xAxes: [{
                                        position: 'bottom',
                                        type: 'linear',
                                        gridLines: {
                                            display: false
                                        },
                                        ticks: {
                                            min: minX - 10,
                                            max: maxX + 10
                                        },
                                        scaleLabel: {
                                            display: true,
                                            labelString: axesXLable,
                                            fontSize: 16,
                                            fontStyle: 'bold'
                                        }
                                    }],
                                yAxes: [{
                                        ticks: {
                                            min: minY - 10,
                                            max: maxY + 10
                                        },
                                        scaleLabel: {
                                            display: true,
                                            labelString: axesYLabel,
                                            fontSize: 16,
                                            fontStyle: 'bold'
                                        }
                                    }]
                            },
                        }
                    });
                    return chart;
                }
            }
            Results.regressionResults = new RegressionService();
        })(Results = Analysis.Results || (Analysis.Results = {}));
    })(Analysis = EasyDataAnalyzer.Analysis || (EasyDataAnalyzer.Analysis = {}));
})(EasyDataAnalyzer || (EasyDataAnalyzer = {}));
//# sourceMappingURL=data:application/json;base64,