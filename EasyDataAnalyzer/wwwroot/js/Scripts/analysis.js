import 'jquery';
var EasyDataAnalyzer;
(function (EasyDataAnalyzer) {
    var Analysis;
    (function (Analysis) {
        class AnalysisService {
            constructor() {
                this.ElementIDs = {
                    AnalysisMethod: "analysisMethod",
                    AssociationRulesParams: "associationRulesParams",
                    AssociationRulesConfidence: "AssociationRulesConfidence",
                    ClusteringParams: "clusteringParams",
                    ClustersCount: "ClustersCount",
                    ImportsCount: "Imports_Count",
                    DataTable: "analysisDataTable",
                    ImportIdCell: "import",
                    FileNameCell: "fileName",
                    RecordsCountCell: "recordsCount",
                    ErrorsCountCell: "errorsCount",
                    ImportDateCell: "importDate",
                    OkButton: "okButton",
                };
                this.ElementClasses = {
                    Selects: "selectDropDown"
                };
                this.Urls = {
                    LoadSettings: "Analysis/LoadAnalyzeSettings",
                };
                this.initUIElements();
                this.initButtons();
                this.updateMethodParamsVisible();
            }
            initUIElements() {
                let self = this;
                $('.' + this.ElementClasses.Selects).select2({
                    minimumResultsForSearch: -1,
                    width: "70%",
                });
                $('#' + this.ElementIDs.AnalysisMethod).change(function () { self.updateMethodParamsVisible(); });
                $('#' + this.ElementIDs.DataTable).dataTable();
                $(`#${this.ElementIDs.DataTable} tbody`).on('click', 'tr', function () {
                    $(this).toggleClass('selected');
                });
            }
            initButtons() {
                let self = this;
                $('#' + self.ElementIDs.OkButton).off('click').click(function () {
                    let selectedRows = $(`#${self.ElementIDs.DataTable} tbody .selected`);
                    let importIds = [];
                    $(selectedRows).each((i) => {
                        let rowId = parseInt($(selectedRows)[i].children[0].children[0].innerHTML);
                        importIds.push(rowId);
                    });
                    let data = {
                        AnalysisMethod: $('#' + self.ElementIDs.AnalysisMethod).val(),
                        AssociationRulesConfidence: $('#' + self.ElementIDs.AssociationRulesConfidence).val(),
                        ClustersCount: $('#' + self.ElementIDs.ClustersCount).val(),
                        ImportIds: importIds
                    };
                    window.location.replace(self.Urls.LoadSettings + '?settings=' + JSON.stringify(data));
                });
            }
            updateMethodParamsVisible() {
                let method = $('#' + this.ElementIDs.AnalysisMethod).val();
                switch (method) {
                    case "1":
                        if ($('#' + this.ElementIDs.ClusteringParams).hasClass("display-none")) {
                            $('#' + this.ElementIDs.ClusteringParams).removeClass("display-none");
                        }
                        if (!$('#' + this.ElementIDs.AssociationRulesParams).hasClass("display-none")) {
                            $('#' + this.ElementIDs.AssociationRulesParams).addClass("display-none");
                        }
                        break;
                    case "2":
                        if ($('#' + this.ElementIDs.AssociationRulesParams).hasClass("display-none")) {
                            $('#' + this.ElementIDs.AssociationRulesParams).removeClass("display-none");
                        }
                        if (!$('#' + this.ElementIDs.ClusteringParams).hasClass("display-none")) {
                            $('#' + this.ElementIDs.ClusteringParams).addClass("display-none");
                        }
                        break;
                    default:
                        if (!$('#' + this.ElementIDs.AssociationRulesParams).hasClass("display-none")) {
                            $('#' + this.ElementIDs.AssociationRulesParams).addClass("display-none");
                        }
                        if (!$('#' + this.ElementIDs.ClusteringParams).hasClass("display-none")) {
                            $('#' + this.ElementIDs.ClusteringParams).addClass("display-none");
                        }
                        break;
                }
            }
        }
        Analysis.analysisService = new AnalysisService();
    })(Analysis = EasyDataAnalyzer.Analysis || (EasyDataAnalyzer.Analysis = {}));
})(EasyDataAnalyzer || (EasyDataAnalyzer = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHlzaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9TY3JpcHRzL2FuYWx5c2lzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sUUFBUSxDQUFDO0FBRWhCLElBQVUsZ0JBQWdCLENBZ0h6QjtBQWhIRCxXQUFVLGdCQUFnQjtJQUFDLElBQUEsUUFBUSxDQWdIbEM7SUFoSDBCLFdBQUEsUUFBUTtRQUUvQixNQUFNLGVBQWU7WUErQmpCO2dCQTdCUSxlQUFVLEdBQUc7b0JBQ2pCLGNBQWMsRUFBRSxnQkFBZ0I7b0JBRWhDLHNCQUFzQixFQUFFLHdCQUF3QjtvQkFDaEQsMEJBQTBCLEVBQUUsNEJBQTRCO29CQUV4RCxnQkFBZ0IsRUFBRSxrQkFBa0I7b0JBQ3BDLGFBQWEsRUFBRSxlQUFlO29CQUU5QixZQUFZLEVBQUUsZUFBZTtvQkFDN0IsU0FBUyxFQUFFLG1CQUFtQjtvQkFFOUIsWUFBWSxFQUFFLFFBQVE7b0JBQ3RCLFlBQVksRUFBRSxVQUFVO29CQUN4QixnQkFBZ0IsRUFBRSxjQUFjO29CQUNoQyxlQUFlLEVBQUUsYUFBYTtvQkFDOUIsY0FBYyxFQUFFLFlBQVk7b0JBRTVCLFFBQVEsRUFBRSxVQUFVO2lCQUN2QixDQUFDO2dCQUVNLG1CQUFjLEdBQUc7b0JBQ3JCLE9BQU8sRUFBRSxnQkFBZ0I7aUJBQzVCLENBQUM7Z0JBRU0sU0FBSSxHQUFHO29CQUNYLFlBQVksRUFBRSw4QkFBOEI7aUJBQy9DLENBQUM7Z0JBR0UsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN0QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ25CLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1lBQ3JDLENBQUM7WUFFTyxjQUFjO2dCQUNsQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBRWhCLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUM7b0JBQ3pDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztvQkFDM0IsS0FBSyxFQUFFLEtBQUs7aUJBQ2YsQ0FBQyxDQUFDO2dCQUNILENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVsRyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQy9DLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtvQkFDdkQsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBRU8sV0FBVztnQkFDZixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ2hCLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUNqRCxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsa0JBQWtCLENBQUMsQ0FBQztvQkFDdEUsSUFBSSxTQUFTLEdBQWEsRUFBRSxDQUFDO29CQUU3QixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7d0JBQ3ZCLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDM0UsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDMUIsQ0FBQyxDQUFDLENBQUM7b0JBRUgsSUFBSSxJQUFJLEdBQUc7d0JBQ1AsY0FBYyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLEVBQUU7d0JBQzdELDBCQUEwQixFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEdBQUcsRUFBRTt3QkFDckYsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUU7d0JBQzNELFNBQVMsRUFBRSxTQUFTO3FCQUN2QixDQUFBO29CQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzFGLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztZQUVPLHlCQUF5QjtnQkFDN0IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUUzRCxRQUFRLE1BQU0sRUFBRTtvQkFDWixLQUFLLEdBQUc7d0JBQ0osSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUU7NEJBQ3BFLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQzt5QkFDekU7d0JBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTs0QkFDM0UsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO3lCQUM1RTt3QkFDRCxNQUFNO29CQUNWLEtBQUssR0FBRzt3QkFDSixJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTs0QkFDMUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO3lCQUMvRTt3QkFFRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFOzRCQUNyRSxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7eUJBQ3RFO3dCQUNELE1BQU07b0JBQ1Y7d0JBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTs0QkFDM0UsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO3lCQUM1RTt3QkFFRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFOzRCQUNyRSxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7eUJBQ3RFO3dCQUNELE1BQU07aUJBQ2I7WUFDTCxDQUFDO1NBRUo7UUFFVSx3QkFBZSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7SUFDdkQsQ0FBQyxFQWhIMEIsUUFBUSxHQUFSLHlCQUFRLEtBQVIseUJBQVEsUUFnSGxDO0FBQUQsQ0FBQyxFQWhIUyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBZ0h6QiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgJ2pxdWVyeSc7XHJcblxyXG5uYW1lc3BhY2UgRWFzeURhdGFBbmFseXplci5BbmFseXNpcyB7XHJcblxyXG4gICAgY2xhc3MgQW5hbHlzaXNTZXJ2aWNlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBFbGVtZW50SURzID0ge1xyXG4gICAgICAgICAgICBBbmFseXNpc01ldGhvZDogXCJhbmFseXNpc01ldGhvZFwiLFxyXG5cclxuICAgICAgICAgICAgQXNzb2NpYXRpb25SdWxlc1BhcmFtczogXCJhc3NvY2lhdGlvblJ1bGVzUGFyYW1zXCIsXHJcbiAgICAgICAgICAgIEFzc29jaWF0aW9uUnVsZXNDb25maWRlbmNlOiBcIkFzc29jaWF0aW9uUnVsZXNDb25maWRlbmNlXCIsXHJcblxyXG4gICAgICAgICAgICBDbHVzdGVyaW5nUGFyYW1zOiBcImNsdXN0ZXJpbmdQYXJhbXNcIixcclxuICAgICAgICAgICAgQ2x1c3RlcnNDb3VudDogXCJDbHVzdGVyc0NvdW50XCIsXHJcblxyXG4gICAgICAgICAgICBJbXBvcnRzQ291bnQ6IFwiSW1wb3J0c19Db3VudFwiLFxyXG4gICAgICAgICAgICBEYXRhVGFibGU6IFwiYW5hbHlzaXNEYXRhVGFibGVcIixcclxuXHJcbiAgICAgICAgICAgIEltcG9ydElkQ2VsbDogXCJpbXBvcnRcIixcclxuICAgICAgICAgICAgRmlsZU5hbWVDZWxsOiBcImZpbGVOYW1lXCIsXHJcbiAgICAgICAgICAgIFJlY29yZHNDb3VudENlbGw6IFwicmVjb3Jkc0NvdW50XCIsXHJcbiAgICAgICAgICAgIEVycm9yc0NvdW50Q2VsbDogXCJlcnJvcnNDb3VudFwiLFxyXG4gICAgICAgICAgICBJbXBvcnREYXRlQ2VsbDogXCJpbXBvcnREYXRlXCIsXHJcblxyXG4gICAgICAgICAgICBPa0J1dHRvbjogXCJva0J1dHRvblwiLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHByaXZhdGUgRWxlbWVudENsYXNzZXMgPSB7XHJcbiAgICAgICAgICAgIFNlbGVjdHM6IFwic2VsZWN0RHJvcERvd25cIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHByaXZhdGUgVXJscyA9IHtcclxuICAgICAgICAgICAgTG9hZFNldHRpbmdzOiBcIkFuYWx5c2lzL0xvYWRBbmFseXplU2V0dGluZ3NcIixcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0VUlFbGVtZW50cygpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRCdXR0b25zKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWV0aG9kUGFyYW1zVmlzaWJsZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbml0VUlFbGVtZW50cygpOiB2b2lkIHtcclxuICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgJCgnLicgKyB0aGlzLkVsZW1lbnRDbGFzc2VzLlNlbGVjdHMpLnNlbGVjdDIoe1xyXG4gICAgICAgICAgICAgICAgbWluaW11bVJlc3VsdHNGb3JTZWFyY2g6IC0xLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNzAlXCIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkKCcjJyArIHRoaXMuRWxlbWVudElEcy5BbmFseXNpc01ldGhvZCkuY2hhbmdlKGZ1bmN0aW9uICgpIHsgc2VsZi51cGRhdGVNZXRob2RQYXJhbXNWaXNpYmxlKCk7IH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJCgnIycgKyB0aGlzLkVsZW1lbnRJRHMuRGF0YVRhYmxlKS5kYXRhVGFibGUoKTtcclxuICAgICAgICAgICAgJChgIyR7dGhpcy5FbGVtZW50SURzLkRhdGFUYWJsZX0gdGJvZHlgKS5vbignY2xpY2snLCAndHInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW5pdEJ1dHRvbnMoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgJCgnIycgKyBzZWxmLkVsZW1lbnRJRHMuT2tCdXR0b24pLm9mZignY2xpY2snKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWRSb3dzID0gJChgIyR7c2VsZi5FbGVtZW50SURzLkRhdGFUYWJsZX0gdGJvZHkgLnNlbGVjdGVkYCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW1wb3J0SWRzOiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICQoc2VsZWN0ZWRSb3dzKS5lYWNoKChpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvd0lkID0gcGFyc2VJbnQoJChzZWxlY3RlZFJvd3MpW2ldLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0SWRzLnB1c2gocm93SWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQW5hbHlzaXNNZXRob2Q6ICQoJyMnICsgc2VsZi5FbGVtZW50SURzLkFuYWx5c2lzTWV0aG9kKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICBBc3NvY2lhdGlvblJ1bGVzQ29uZmlkZW5jZTogJCgnIycgKyBzZWxmLkVsZW1lbnRJRHMuQXNzb2NpYXRpb25SdWxlc0NvbmZpZGVuY2UpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIENsdXN0ZXJzQ291bnQ6ICQoJyMnICsgc2VsZi5FbGVtZW50SURzLkNsdXN0ZXJzQ291bnQpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIEltcG9ydElkczogaW1wb3J0SWRzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzZWxmLlVybHMuTG9hZFNldHRpbmdzICsgJz9zZXR0aW5ncz0nICsgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlTWV0aG9kUGFyYW1zVmlzaWJsZSgpIHtcclxuICAgICAgICAgICAgbGV0IG1ldGhvZCA9ICQoJyMnICsgdGhpcy5FbGVtZW50SURzLkFuYWx5c2lzTWV0aG9kKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAobWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiMVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKCcjJyArIHRoaXMuRWxlbWVudElEcy5DbHVzdGVyaW5nUGFyYW1zKS5oYXNDbGFzcyhcImRpc3BsYXktbm9uZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjJyArIHRoaXMuRWxlbWVudElEcy5DbHVzdGVyaW5nUGFyYW1zKS5yZW1vdmVDbGFzcyhcImRpc3BsYXktbm9uZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJCgnIycgKyB0aGlzLkVsZW1lbnRJRHMuQXNzb2NpYXRpb25SdWxlc1BhcmFtcykuaGFzQ2xhc3MoXCJkaXNwbGF5LW5vbmVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyB0aGlzLkVsZW1lbnRJRHMuQXNzb2NpYXRpb25SdWxlc1BhcmFtcykuYWRkQ2xhc3MoXCJkaXNwbGF5LW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIjJcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyB0aGlzLkVsZW1lbnRJRHMuQXNzb2NpYXRpb25SdWxlc1BhcmFtcykuaGFzQ2xhc3MoXCJkaXNwbGF5LW5vbmVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyB0aGlzLkVsZW1lbnRJRHMuQXNzb2NpYXRpb25SdWxlc1BhcmFtcykucmVtb3ZlQ2xhc3MoXCJkaXNwbGF5LW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISQoJyMnICsgdGhpcy5FbGVtZW50SURzLkNsdXN0ZXJpbmdQYXJhbXMpLmhhc0NsYXNzKFwiZGlzcGxheS1ub25lXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgdGhpcy5FbGVtZW50SURzLkNsdXN0ZXJpbmdQYXJhbXMpLmFkZENsYXNzKFwiZGlzcGxheS1ub25lXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkKCcjJyArIHRoaXMuRWxlbWVudElEcy5Bc3NvY2lhdGlvblJ1bGVzUGFyYW1zKS5oYXNDbGFzcyhcImRpc3BsYXktbm9uZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjJyArIHRoaXMuRWxlbWVudElEcy5Bc3NvY2lhdGlvblJ1bGVzUGFyYW1zKS5hZGRDbGFzcyhcImRpc3BsYXktbm9uZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJCgnIycgKyB0aGlzLkVsZW1lbnRJRHMuQ2x1c3RlcmluZ1BhcmFtcykuaGFzQ2xhc3MoXCJkaXNwbGF5LW5vbmVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyB0aGlzLkVsZW1lbnRJRHMuQ2x1c3RlcmluZ1BhcmFtcykuYWRkQ2xhc3MoXCJkaXNwbGF5LW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBsZXQgYW5hbHlzaXNTZXJ2aWNlID0gbmV3IEFuYWx5c2lzU2VydmljZSgpO1xyXG59Il19