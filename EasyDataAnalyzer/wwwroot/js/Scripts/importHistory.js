import 'jquery';
var EasyDataAnalyzer;
(function (EasyDataAnalyzer) {
    var Import;
    (function (Import) {
        class ImportHistoryService {
            constructor() {
                this.ElementIDs = {
                    ImportsCount: "Imports_Count",
                    DataTable: "importHistoryDataTable",
                    ImportIdCell: "import",
                    FileNameCell: "fileName",
                    RecordsCountCell: "recordsCount",
                    ErrorsCountCell: "errorsCount",
                    ImportDateCell: "importDate",
                    LoadParamsButton: "loadParams",
                    LoadDataButton: "loadData",
                    InfoModal: "infoModal",
                    InfoModalHeader: "infoModalHeader",
                    InfoModalBody: "infoModalBody",
                    ParametersInfoTable: "parametersInfoTable"
                };
                this.Urls = {
                    LoadParams: "LoadImportParams",
                    LoadData: "LoadImportData",
                };
                this.initUIElements();
                this.initButtons();
            }
            initUIElements() {
                let self = this;
                $('#' + this.ElementIDs.DataTable).dataTable();
            }
            initButtons() {
                let self = this;
                let count = $('#' + self.ElementIDs.ImportsCount).val();
                for (let i = 0; i < count; i++) {
                    $('#' + self.ElementIDs.LoadParamsButton + i.toString())
                        .off('click').click(function () {
                        let importId = $('#' + self.ElementIDs.ImportIdCell + i.toString()).html();
                        $.ajax({
                            url: self.Urls.LoadParams,
                            type: 'GET',
                            cache: false,
                            async: true,
                            dataType: "html",
                            data: { importId: importId }
                        })
                            .done(function (result) {
                            $('#' + self.ElementIDs.InfoModalHeader).html('Параметри імпорту');
                            $('#' + self.ElementIDs.InfoModalBody).html(result);
                            $('#' + self.ElementIDs.ParametersInfoTable).dataTable();
                        }).fail(function (xhr) {
                            console.log('error : ' + xhr.status + ' - ' + xhr.statusText + ' - ' + xhr.responseText);
                        });
                    });
                    $('#' + self.ElementIDs.LoadDataButton + i.toString())
                        .off('click').click(function () {
                        let importId = $('#' + self.ElementIDs.ImportIdCell + i.toString()).html();
                        $.ajax({
                            url: self.Urls.LoadData,
                            type: 'GET',
                            cache: false,
                            async: true,
                            dataType: "html",
                            data: { importId: importId }
                        })
                            .done(function (result) {
                            $('#' + self.ElementIDs.InfoModalHeader).html('Дані імпорту');
                            $('#' + self.ElementIDs.InfoModalBody).html(result);
                            $('#' + self.ElementIDs.ParametersInfoTable).dataTable();
                        }).fail(function (xhr) {
                            console.log('error : ' + xhr.status + ' - ' + xhr.statusText + ' - ' + xhr.responseText);
                        });
                    });
                }
            }
        }
        Import.importHistory = new ImportHistoryService();
    })(Import = EasyDataAnalyzer.Import || (EasyDataAnalyzer.Import = {}));
})(EasyDataAnalyzer || (EasyDataAnalyzer = {}));
//# sourceMappingURL=data:application/json;base64,